<project name="River" default="all">

    <property file="build.properties.local"/>
    <property file="build.properties"/>

    <!-- Library: APIViz -->

    <target name="lib.apiviz-check">
        <available property="lib.apiviz.exists" file="${lib.apiviz.local}"/>
    </target>

    <target name="lib.apiviz" depends="lib.apiviz-check" unless="lib.apiviz.exists">
        <mkdir dir="${local.repository}/${lib.apiviz.dir}"/>
        <get src="${lib.apiviz.remote}" dest="${lib.apiviz.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.apiviz.license}.txt" dest="${lib.apiviz.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- Library: JBoss Serialization -->

    <target name="lib.jboss-serialization-check">
        <available property="lib.jboss-serialization.exists" file="${lib.jboss-serialization.local}"/>
    </target>

    <target name="lib.jboss-serialization" depends="lib.jboss-serialization-check" unless="lib.jboss-serialization.exists">
        <mkdir dir="${local.repository}/${lib.jboss-serialization.dir}"/>
        <get src="${lib.jboss-serialization.remote}" dest="${lib.jboss-serialization.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jboss-serialization.license}.txt" dest="${lib.jboss-serialization.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- Library: JUnit -->

    <target name="lib.junit-check">
        <available property="lib.junit.exists" file="${lib.junit.local}"/>
    </target>

    <target name="lib.junit" depends="lib.junit-check" unless="lib.junit.exists">
        <mkdir dir="${local.repository}/${lib.junit.dir}"/>
        <get src="${lib.junit.remote}" dest="${lib.junit.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.junit.license}.txt" dest="${lib.junit.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- api module -->

    <target name="api.compile.depcheck">
        <mkdir dir="api/target/main"/>
        <uptodate property="api.compile.uptodate" targetfile="api/target/main/.lastcompile">
            <srcfiles dir="api/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="api.compile" depends="api.compile.depcheck" unless="api.compile.uptodate">
        <mkdir dir="api/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="api/src/main/java"
                destdir="api/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
        <touch file="api/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="api.clean">
        <delete dir="api/target"/>
    </target>

    <target name="api" description="Build the api module" depends="api.compile">
        <path id="api.classpath">
            <pathelement location="api/target/main/classes"/>
        </path>
        <java classpathref="api.classpath" classname="org.jboss.marshalling.Version" outputproperty="version"/>
        <property name="version" value="UNKNOWN"/>
    </target>

    <!-- river module -->

    <target name="river.compile.depcheck">
        <mkdir dir="river/target/main"/>
        <uptodate property="river.compile.uptodate" targetfile="river/target/main/.lastcompile">
            <srcfiles dir="river/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="river.compile" depends="river.compile.depcheck" unless="river.compile.uptodate">
        <mkdir dir="river/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="river/src/main/java"
                destdir="river/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
            </classpath>
        </javac>
        <touch file="river/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="river.clean">
        <delete dir="river/target"/>
    </target>

    <target name="river" description="Build the River marshalling implementation module" depends="api,river.compile">
        <path id="river.classpath">
            <pathelement location="river/target/main/classes"/>
        </path>
    </target>

    <!-- serialization-java module -->

    <target name="serialization-java.compile.depcheck">
        <mkdir dir="serialization-java/target/main"/>
        <uptodate property="serialization-java.compile.uptodate" targetfile="serialization-java/target/main/.lastcompile">
            <srcfiles dir="serialization-java/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="serialization-java.compile" depends="serialization-java.compile.depcheck" unless="serialization-java.compile.uptodate">
        <mkdir dir="serialization-java/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="serialization-java/src/main/java"
                destdir="serialization-java/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
            </classpath>
        </javac>
        <touch file="serialization-java/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="serialization-java.clean">
        <delete dir="serialization-java/target"/>
    </target>

    <target name="serialization-java" description="Build the serialization-java module" depends="api,serialization-java.compile">
        <path id="serialization-java.classpath">
            <pathelement location="serialization-java/target/main/classes"/>
        </path>
    </target>

    <!-- testing-support module -->

    <target name="testing-support.compile.depcheck">
        <mkdir dir="testing-support/target/main"/>
        <uptodate property="testing-support.compile.uptodate" targetfile="testing-support/target/main/.lastcompile">
            <srcfiles dir="testing-support/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="testing-support.compile" depends="testing-support.compile.depcheck" unless="testing-support.compile.uptodate">
        <mkdir dir="testing-support/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="testing-support/src/main/java"
                destdir="testing-support/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${lib.junit.local}"/>
            </classpath>
        </javac>
        <touch file="testing-support/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="testing-support.clean">
        <delete dir="testing-support/target"/>
    </target>

    <target name="testing-support" description="Build the testing-support module" depends="lib.junit,testing-support.compile">
        <path id="testing-support.classpath">
            <pathelement location="testing-support/target/main/classes"/>
        </path>
    </target>

    <!-- tests module -->

    <target name="tests.compile.depcheck">
        <mkdir dir="tests/target/main"/>
        <uptodate property="tests.compile.uptodate" targetfile="tests/target/main/.lastcompile">
            <srcfiles dir="tests/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="tests.compile" depends="tests.compile.depcheck" unless="tests.compile.uptodate">
        <mkdir dir="tests/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="tests/src/main/java"
                destdir="tests/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="river.classpath"/>
                <path refid="serialization-java.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="${lib.junit.local}"/>
            </classpath>
        </javac>
        <touch file="tests/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="tests.clean">
        <delete dir="tests/target"/>
    </target>

    <target name="tests.run.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="tests/target/test-results"/>
        <echo message="JVM args = ${test.jvmargs}"/>
        <echo message="build.home = ${basedir}"/>
        <echo message="ant.library.dir = ${ant.home}/lib"/>
        <echo message="lib.junit.local = ${lib.junit.local}"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="river.classpath"/>
                <path refid="serialization-java.classpath"/>
                <path refid="tests.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="${lib.junit.local}"/>
            </classpath>
            <batchtest fork="yes" todir="tests/target/test-results"
                       haltonfailure="no">
               <fileset dir="tests/target/main/classes">
                   <include name="**/*Tests.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="tests.run.plain" depends="tests,testing-support">
        <antcall inheritall="true" inheritrefs="true" target="tests.run.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
    </target>

    <target name="tests.run.security" depends="tests,testing-support">
        <antcall inheritall="true" inheritrefs="true" target="tests.run.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.testsupport.LoggingSecurityManager -Djava.security.policy=${basedir}/testing-support/src/main/resources/testing.policy -Dsecurity.debug=policy"/>
        </antcall>
    </target>

    <target name="tests.run" depends="tests.run.plain,tests.run.security"/>

    <target name="tests" description="Build the tests module" depends="lib.junit,api,river,serialization-java,testing-support,tests.compile">
        <path id="tests.classpath">
            <pathelement location="tests/target/main/classes"/>
        </path>
    </target>

    <!-- JAR targets -->

    <target name="api.jar" description="Build the api jar" depends="api.jar.clean,api">
        <delete dir="api/target/main/resources/META-INF/"/>
        <mkdir dir="api/target/main/resources/META-INF/"/>
        <copy file="api/src/main/resources/META-INF/jboss-classloading.xml" todir="api/target/main/resources/META-INF/"/>
        <replace file="api/target/main/resources/META-INF/jboss-classloading.xml">
            <replacefilter token="@VERSION@" value="${version}"/>
        </replace>
        <jar jarfile="marshalling-api.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="Marshalling API"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="Marshalling API"/>
                <!-- attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/ -->
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
                <attribute name="Main-Class" value="org.jboss.marshalling.Version"/>
            </manifest>
            <metainf dir="api/target/main/resources/META-INF/">
                <include name="jboss-classloading.xml"/>
            </metainf>
            <zipfileset dir="api/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
        </jar>
    </target>

    <target name="api.jar.clean">
        <delete file="marshalling-api.jar"/>
    </target>

    <target name="river.jar" description="Build the River marshalling implementation jar" depends="river.jar.clean,river">
        <delete dir="river/target/main/resources/META-INF/"/>
        <mkdir dir="river/target/main/resources/META-INF/"/>
        <copy file="river/src/main/resources/META-INF/jboss-classloading.xml" todir="river/target/main/resources/META-INF/"/>
        <replace file="river/target/main/resources/META-INF/jboss-classloading.xml">
            <replacefilter token="@VERSION@" value="${version}"/>
        </replace>
        <jar jarfile="river.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="River marshalling implementation"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="River marshalling implementation"/>
                <!-- attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/ -->
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
            </manifest>
            <metainf dir="river/target/main/resources/META-INF/">
                <include name="jboss-classloading.xml"/>
            </metainf>
            <zipfileset dir="river/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
        </jar>
    </target>

    <target name="river.jar.clean">
        <delete file="river.jar"/>
    </target>

    <target name="serialization-java.jar" description="Build the River marshalling implementation jar" depends="serialization-java.jar.clean,serialization-java">
        <delete dir="serialization-java/target/main/resources/META-INF/"/>
        <mkdir dir="serialization-java/target/main/resources/META-INF/"/>
        <copy file="serialization-java/src/main/resources/META-INF/jboss-classloading.xml" todir="serialization-java/target/main/resources/META-INF/"/>
        <replace file="serialization-java/target/main/resources/META-INF/jboss-classloading.xml">
            <replacefilter token="@VERSION@" value="${version}"/>
        </replace>
        <jar jarfile="serialization-java.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="Java serialization marshalling implementation"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="Java serialization marshalling implementation"/>
                <!-- attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/ -->
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
            </manifest>
            <metainf dir="serialization-java/target/main/resources/META-INF/">
                <include name="jboss-classloading.xml"/>
            </metainf>
            <zipfileset dir="serialization-java/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
        </jar>
    </target>

    <target name="serialization-java.jar.clean">
        <delete file="serialization-java.jar"/>
    </target>

    <!-- Javadoc targets -->

    <target name="javadoc" depends="lib.apiviz,api,river">
        <delete dir="docs/target/main/javadoc"/>
        <mkdir dir="docs/target/main/javadoc"/>
        <delete dir="docs/target/tmp/java"/>
        <delete dir="docs/target/tmp-io/java"/>
        <mkdir dir="docs/target/tmp/java"/>
        <mkdir dir="docs/target/tmp-io/java"/>
        <copy todir="docs/target/tmp/java">
            <fileset dir="river/src/main/java">
                <include name="**/package-info.java"/>
                <include name="**/RiverMarshallerFactory.java"/>
            </fileset>
            <fileset dir="serialization-java/src/main/java">
                <include name="**/package-info.java"/>
                <include name="**/JavaSerializationMarshallerFactory.java"/>
            </fileset>
        </copy>
        <unzip dest="docs/target/tmp-io/java" src="${java.home}/../src.zip">
            <patternset>
                <include name="java/io/**/*.java"/>
            </patternset>
        </unzip>
        <javadoc destdir="docs/target/main/javadoc" author="false" version="false" use="false" windowtitle="Marshalling API">
            <doclet name="net.gleamynode.apiviz.APIviz" path="${lib.apiviz.local}"/>
            <group title="Marshalling API">
                <package name="org.jboss.marshalling"/>
                <package name="org.jboss.marshalling.reflect"/>
            </group>
            <group packages="org.jboss.marshalling.river" title="River Marshalling Implementation"/>
            <group packages="org.jboss.marshalling.serialization.java" title="Java Serialization Marshalling Implementation"/>
            <packageset dir="api/src/main/java"/>
            <packageset dir="docs/target/tmp/java"/>
            <sourcepath location="docs/target/tmp-io/java"/>
            <excludepackage name="java.io"/>
            <doctitle><![CDATA[<h1>Marshalling API version ${version}</h1>]]></doctitle>
            <header><![CDATA[Marshalling API version ${version}]]></header>
            <footer><![CDATA[Marshalling API version ${version}]]></footer>
            <bottom><![CDATA[<i>Copyright &#169; 2008 JBoss, a division of Red Hat, Inc.</i>]]></bottom>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/" resolvelink="true"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="river.classpath"/>
            </classpath>
        </javadoc>
        <delete dir="docs/target/tmp/java"/>
        <delete dir="docs/target/tmp-io/java"/>
    </target>


    <!-- Global targets -->

    <target name="jars.clean" description="Clean all JAR targets" depends="api.jar.clean,river.jar.clean,serialization-java.jar.clean"/>

    <target name="all" description="Build all targets" depends="api.jar,river.jar,serialization-java.jar"/>

    <target name="test" description="Run the tests" depends="tests.run"/>

    <target name="clean" description="Clean all targets" depends="api.clean,river.clean,serialization-java.clean,tests.clean,jars.clean"/>
</project>